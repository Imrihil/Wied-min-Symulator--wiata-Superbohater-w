/*
 *
 * THE WITCHER
 *
 * Symulator swiata Superbohaterow
 * stworzony na przedmiot Programowanie Obiektowe.
 * 
 * 2014 (c) Mateusz Ledzianowski INF117226
 *
 */
package thewitcher;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 * Klasa obsługująca wyświetlane okno oraz zdarzenia myszki i klawiatury.
 *
 * @author Imrihil
 */
public class WindowJFrame extends javax.swing.JFrame implements MouseListener, KeyListener {

    /**
     * Spis istniejących cywili.
     */
    private static volatile Map<Civilian, Thread> civilians;
    /**
     * Spis istniejących potworów.
     */
    private static volatile Map<Monster, Thread> monsters;
    /**
     * Spis istniejących bohaterów.
     */
    private static volatile Map<Hero, Thread> heroes;
    /**
     * Spis istniejących miast.
     */
    private static volatile Map<Cities, City> cities;
    /**
     * Panel informacyjny - jest odpowiedzialny za rysowanie grafik.
     */
    protected static volatile InformPanel info;

    /**
     * Creates new form WindowJFrame.
     *
     * @param civilians
     * @param monsters
     * @param heroes
     * @param cities
     * @param info
     */
    WindowJFrame(Map<Civilian, Thread> civilians, Map<Monster, Thread> monsters, Map<Hero, Thread> heroes, Map<Cities, City> cities, InformPanel info) {
        addMouseListener((MouseListener) this);
        addKeyListener((KeyListener) this);
        initComponents();
        WindowJFrame.civilians = civilians;
        WindowJFrame.monsters = monsters;
        WindowJFrame.heroes = heroes;
        WindowJFrame.cities = cities;
        WindowJFrame.info = info;

        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(640, 480);
        this.setVisible(true);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {
        Monster foundMonster = null;
        Hero foundHero = null;
        Civilian foundCivilian = null;
        City foundCity = null;
        if (TheGame.welcome) {
            if (TheGame.tutorial > 0) {
                TheGame.tutorial++;
                if (TheGame.tutorial == 13 || e.getX() >= 370 && e.getX() <= 620 && e.getY() >= 400 && e.getY() <= 460) {
                    TheGame.tutorial = 0;
                }
            } else if (TheGame.showResults) {
                TheGame.showResults = false;
            } else {
                if (e.getX() >= 195 && e.getX() <= 445 && e.getY() >= 175 && e.getY() <= 235) {
                    TheGame.welcome = false;
                } else if (e.getX() >= 195 && e.getX() <= 445 && e.getY() >= 245 && e.getY() <= 305) {
                    TheGame.tutorial = 1;
                } else if (e.getX() >= 195 && e.getX() <= 445 && e.getY() >= 315 && e.getY() <= 375) {
                    TheGame.showResults = true;
                }
            }
        } else if (TheGame.playing) {
            for (Monster monster : monsters.keySet()) {
                if (e.getX() >= monster.getX() - monster.getIcon().getWidth() / 2 && e.getX() <= monster.getX() + monster.getIcon().getWidth() / 2) {
                    if (e.getY() >= monster.getY() - monster.getIcon().getHeight() / 2 && e.getY() <= monster.getY() + monster.getIcon().getHeight() / 2) {
                        foundMonster = monster;
                        break;
                    }
                }
            }
            if (foundMonster == null || e.getButton() == MouseEvent.BUTTON3) {
                for (Hero hero : heroes.keySet()) {
                    if (e.getX() >= hero.getX() - hero.getIcon().getWidth() / 2 && e.getX() <= hero.getX() + hero.getIcon().getWidth() / 2) {
                        if (e.getY() >= hero.getY() - hero.getIcon().getHeight() / 2 && e.getY() <= hero.getY() + hero.getIcon().getHeight() / 2) {
                            foundHero = hero;
                            foundMonster = null;
                            break;
                        }
                    }
                }
            }
            if (foundMonster == null && foundHero == null) {
                for (Civilian civil : civilians.keySet()) {
                    if (civil.isIsgoing()) {
                        double civilianShiftX = 0;
                        if (civil.getDirectionY() < 0) {
                            civilianShiftX = 3;
                        } else if (civil.getDirectionY() > 0) {
                            civilianShiftX = -3;
                        }
                        double civilianShiftY = 0;
                        if (civil.getDirectionX() < 0) {
                            civilianShiftY = -3;
                        } else if (civil.getDirectionX() > 0) {
                            civilianShiftY = 3;
                        }
                        if (e.getX() >= civil.getX() + civilianShiftX - 3 && e.getX() <= civil.getX() + civilianShiftX + 3) {
                            if (e.getY() >= civil.getY() + civilianShiftY - 3 && e.getY() <= civil.getY() + civilianShiftY + 3) {
                                foundCivilian = civil;
                                break;
                            }
                        }
                    }
                }
            }
            if (foundMonster == null && foundHero == null && foundCivilian == null) {
                for (Cities currentKey : cities.keySet()) {
                    if (e.getX() >= cities.get(currentKey).getX() - cities.get(currentKey).getIcon().getWidth() / 2 && e.getX() <= cities.get(currentKey).getX() + cities.get(currentKey).getIcon().getWidth() / 2) {
                        if (e.getY() >= cities.get(currentKey).getY() - cities.get(currentKey).getIcon().getHeight() + 3 && e.getY() <= cities.get(currentKey).getY() + 3) {
                            foundCity = cities.get(currentKey);
                            break;
                        }
                    }
                }
            }
            if (e.getX() >= 100 && e.getX() <= 132 && e.getY() >= 435 && e.getY() <= 467) {
                info.setShowInfo(5);
            } else if (e.getX() >= 140 && e.getX() <= 172 && e.getY() >= 435 && e.getY() <= 467) {
                info.setShowInfo(6);
            } else if (e.getX() >= 180 && e.getX() <= 212 && e.getY() >= 435 && e.getY() <= 467) {
                info.setShowInfo(7);
            } else if (e.getX() >= 220 && e.getX() <= 252 && e.getY() >= 435 && e.getY() <= 467) {
                info.setShowInfo(8);
            } else if (foundMonster != null) {
                info.setShowInfo(3);
                info.setInfo3(foundMonster);
                foundMonster.setHighlighted(true);
            } else if (foundHero != null) {
                info.setShowInfo(4);
                info.setInfo4(foundHero);
                InformPanel.heroTargetChanging = false;
                foundHero.setHighlighted(true);
            } else if (foundCivilian != null) {
                info.setShowInfo(1);
                info.setInfo1(foundCivilian);
                InformPanel.civilTargetChanging = false;
                foundCivilian.setHighlighted(true);
            } else if (foundCity != null) {
                info.setShowInfo(2);
                info.setInfo2(foundCity);
                foundCity.setHighlighted(true);
            } else if (info.getShowInfo() > 0 && (e.getX() < 380 || e.getX() > 630 || e.getY() < 50 || e.getY() > 450)) {
                if (info.getInfo1() != null) {
                    info.getInfo1().setHighlighted(false);
                }
                if (info.getInfo2() != null) {
                    info.getInfo2().setHighlighted(false);
                }
                if (info.getInfo3() != null) {
                    info.getInfo3().setHighlighted(false);
                }
                if (info.getInfo4() != null) {
                    info.getInfo4().setHighlighted(false);
                }
                info.setShowInfo(0);
            }
            if (info.getShowInfo() == 1 && e.getX() >= 450 && e.getX() <= 482 && e.getY() >= 390 && e.getY() <= 422) {
                info.getInfo1().setStart(!info.getInfo1().isStart());
            }
            if (info.getShowInfo() == 1 && e.getX() >= 530 && e.getX() <= 562 && e.getY() >= 390 && e.getY() <= 422) {
                info.getInfo1().delete();
                info.setShowInfo(0);
            }
            if (info.getShowInfo() == 1 && e.getX() >= 490 && e.getX() <= 522 && e.getY() >= 390 && e.getY() <= 422) {
                InformPanel.civilTargetChanging = !InformPanel.civilTargetChanging;
            }
            if (info.getShowInfo() == 1 && InformPanel.civilTargetChanging) {
                int wspX = 420;
                int wspY = 150;
                int ile = 0;
                for (Cities city : cities.keySet()) {
                    if (!cities.get(city).isDestroyed()) {
                        if (e.getX() >= wspX + (ile / 7) * 100 && e.getX() <= wspX + (ile / 7) * 100 + 80) {
                            if (e.getY() >= wspY + (ile % 7) * 20 - 13 && e.getY() <= wspY + (ile % 7) * 20 + 3) {
                                if (e.getButton() == MouseEvent.BUTTON3) {
                                    cities.get(city).setHighlighted(true);
                                } else {
                                    info.getInfo1().setTarget(cities.get(city));
                                    InformPanel.civilTargetChanging = !InformPanel.civilTargetChanging;
                                }
                            }
                        }
                        ile++;
                    }
                }
            }
            if (info.getShowInfo() == 2 && e.getX() >= 435 && e.getX() <= 585 && e.getY() >= 115 && e.getY() <= 295 && !info.getInfo2().isDestroyed()) {
                TheGame.newCivilian(info.getInfo2());
            }
            if (info.getShowInfo() == 3 && e.getX() >= 420 && e.getX() <= 600 && e.getY() >= 115 && e.getY() <= 295) {
                Hero freeHero = null;
                for (Hero hero : heroes.keySet()) {
                    if (!hero.isIsgoing() && hero.getToChase() == null && hero.getEnemy() == null) {
                        freeHero = hero;
                        break;
                    }
                }
                if (freeHero != null) {
                    freeHero.setToChase(info.getInfo3());
                    freeHero.setIsgoing(true);
                } else {
                    try {
                        TheGame.newHero(info.getInfo3());
                    } catch (IOException ex) {
                        Logger.getLogger(WindowJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if (info.getShowInfo() == 4 && e.getX() >= 490 && e.getX() <= 522 && e.getY() >= 395 && e.getY() <= 427) {
                InformPanel.heroTargetChanging = !InformPanel.heroTargetChanging;
            }
            if (info.getShowInfo() == 4 && InformPanel.heroTargetChanging) {
                int wspX = 420;
                int wspY = 120;
                int ile = 0;
                for (Monster monster : monsters.keySet()) {
                    if (e.getX() >= wspX && e.getX() <= wspX + 160) {
                        if (e.getY() >= wspY + ile * 20 - 13 && e.getY() <= wspY + ile * 20 + 3) {
                            if (e.getButton() == MouseEvent.BUTTON3) {
                                monster.setHighlighted(true);
                            } else {
                                info.getInfo4().setToChase(monster);
                                info.getInfo4().setIsgoing(true);
                                InformPanel.heroTargetChanging = !InformPanel.heroTargetChanging;
                            }
                        }
                    }
                    ile++;
                }
            }
            if (info.getShowInfo() == 5) {
                int wspX = 405;
                int wspY = 160;
                int ile = 0;
                for (Cities city : cities.keySet()) {
                    if (!cities.get(city).isDestroyed()) {
                        if (e.getX() >= wspX + (ile / 7) * 100 && e.getX() <= wspX + (ile / 7) * 100 + 80) {
                            if (e.getY() >= wspY + (ile % 7) * 20 - 13 && e.getY() <= wspY + (ile % 7) * 20 + 3) {
                                if (e.getButton() == MouseEvent.BUTTON3) {
                                    cities.get(city).setHighlighted(true);
                                } else {
                                    info.setShowInfo(2);
                                    info.setInfo2(cities.get(city));
                                    cities.get(city).setHighlighted(true);
                                }
                            }
                        }
                        ile++;
                    }
                }
            } else if (info.getShowInfo() == 6 && info.getStep() == 0) {
                if (e.getX() >= 405 && e.getX() <= 485 && e.getY() >= 147 && e.getY() <= 163) {
                    info.setStep(1);
                }
            } else if (info.getShowInfo() == 6 && info.getStep() == 1) {
                int wspX = 405;
                int wspY = 180;
                int ile = 0;
                for (Cities city : cities.keySet()) {
                    if (!cities.get(city).isDestroyed()) {
                        if (e.getX() >= wspX + (ile / 7) * 100 && e.getX() <= wspX + (ile / 7) * 100 + 80) {
                            if (e.getY() >= wspY + (ile % 7) * 20 - 13 && e.getY() <= wspY + (ile % 7) * 20 + 3) {
                                if (e.getButton() == MouseEvent.BUTTON3) {
                                    cities.get(city).setHighlighted(true);
                                } else {
                                    TheGame.newCivilian(cities.get(city));
                                    info.setStep(0);
                                }
                            }
                        }
                        ile++;
                    }
                }
            } else if (info.getShowInfo() == 7) {
                int wspX = 405;
                int wspY = 160;
                int ile = 0;
                for (Hero hero : heroes.keySet()) {
                    if (e.getX() >= wspX && e.getX() <= wspX + 160) {
                        if (e.getY() >= wspY + ile * 20 - 13 && e.getY() <= wspY + ile * 20 + 3) {
                            if (e.getButton() == MouseEvent.BUTTON3) {
                                hero.setHighlighted(true);
                            } else {
                                InformPanel.heroTargetChanging = false;
                                info.setShowInfo(4);
                                info.setInfo4(hero);
                                hero.setHighlighted(true);
                            }
                        }
                    }
                    ile++;
                }
            } else if (info.getShowInfo() == 8) {
                int wspX = 405;
                int wspY = 160;
                int ile = 0;
                for (Monster monster : monsters.keySet()) {
                    if (e.getX() >= wspX && e.getX() <= wspX + 160) {
                        if (e.getY() >= wspY + ile * 20 - 13 && e.getY() <= wspY + ile * 20 + 3) {
                            if (e.getButton() == MouseEvent.BUTTON3) {
                                monster.setHighlighted(true);
                            } else {
                                info.setShowInfo(3);
                                info.setInfo3(monster);
                                monster.setHighlighted(true);
                            }
                        }
                    }
                    ile++;
                }
            }
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (TheGame.playing && e.getButton() == MouseEvent.BUTTON3) {
            for (Cities city : cities.keySet()) {
                cities.get(city).setHighlighted(false);
            }
            for (Civilian civil : civilians.keySet()) {
                civil.setHighlighted(false);
            }
            for (Hero hero : heroes.keySet()) {
                hero.setHighlighted(false);
            }
            for (Monster mon : monsters.keySet()) {
                mon.setHighlighted(false);
            }
        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    /**
     * d - usun cywila.
     *
     * m - rusz/zatrzymaj cywila.
     *
     * a - rusz wszystkich cywilow.
     *
     * s - zatrzymaj wszystkich cywilow.
     *
     * h - zawroc wszystkich cywilow na mapie do domu.
     *
     * @param e
     */
    @Override
    public void keyTyped(KeyEvent e) {
        if (TheGame.playing) {
            if (info.getShowInfo() == 1 && e.getKeyChar() == 'd') {
                info.getInfo1().delete();
                info.setShowInfo(0);
            } else if (info.getShowInfo() == 1 && e.getKeyChar() == 'm') {
                info.getInfo1().setStart(!info.getInfo1().isStart());
            } else if (e.getKeyChar() == 'a') {
                for (Civilian civ : civilians.keySet()) {
                    if (civ.isIsgoing()) {
                        civ.setStart(true);
                    }
                }
            } else if (e.getKeyChar() == 's') {
                for (Civilian civ : civilians.keySet()) {
                    if (civ.isIsgoing()) {
                        civ.setStart(false);
                    }
                }
            } else if (e.getKeyChar() == 'h') {
                for (Civilian civ : civilians.keySet()) {
                    if (civ.isIsgoing()) {
                        civ.setTarget(civ.getFamilyTown());
                    }
                }
            }
        } else {
            if (!TheGame.podanoDane) {
                if ((e.getKeyChar() >= 'a' && e.getKeyChar() <= 'z') || (e.getKeyChar() >= 'A' && e.getKeyChar() <= 'Z') || e.getKeyChar() == ' ') {
                    TheGame.playerName += e.getKeyChar();
                } else if (e.getKeyChar() == KeyEvent.VK_BACK_SPACE && TheGame.playerName.length() > 0) {
                    TheGame.playerName = TheGame.playerName.substring(0, TheGame.playerName.length() - 1);
                } else if (e.getKeyChar() == KeyEvent.VK_ENTER) {
                    TheGame.podanoDane = true;
                }

            } else {
                if (e.getKeyChar() == KeyEvent.VK_ENTER || e.getKeyChar() == KeyEvent.VK_ESCAPE) {
                    TheGame.zakoncz = true;
                }
            }
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {

    }

    @Override
    public void keyReleased(KeyEvent e) {

    }
}
